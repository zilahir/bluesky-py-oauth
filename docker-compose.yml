services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5174:5174"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - app-network
    restart: unless-stopped

  api:
    build:
      context: ./api-py
      dockerfile: Dockerfile
    ports:
      - "5050:5000"
    env_file:
      - ./api-py/.env
    volumes:
      - ./api-py:/app
    networks:
      - app-network
    depends_on:
      psql:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: ./api-py
          target: /app
          ignore:
            - __pycache__/
            - .venv/

  worker:
    build:
      context: ./api-py
      dockerfile: Dockerfile
    command: python worker.py
    env_file:
      - ./api-py/.env
    volumes:
      - ./api-py:/app
    networks:
      - app-network
    depends_on:
      psql:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: ./api-py
          target: /app
          ignore:
            - __pycache__/
            - .venv/

  redis:
    image: redis:7
    ports:
      - "6279:6379"
    networks:
      - app-network

  psql:
    image: postgres:latest
    env_file:
      - ./api-py/.env
    ports:
      - "5432:5432"
    volumes:
      - psql_volume:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d bluesky"]
      interval: 30s
      timeout: 10s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
    networks:
      - app-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  psql_volume:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge
